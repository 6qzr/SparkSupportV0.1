// SparkSupport Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String?
  role         String // 'customer' | 'staff' | 'admin'
  department   String?
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdTickets  Ticket[]        @relation("CustomerTickets")
  assignedTickets Ticket[]        @relation("AssignedTickets")
  sentMessages    TicketMessage[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tickets Ticket[]

  @@map("categories")
}

model Ticket {
  id              String   @id // T001, T002, etc.
  customerId      String   @map("customer_id")
  assignedStaffId String?  @map("assigned_staff_id")
  categoryId      String   @map("category_id")
  priority        String // 'low' | 'medium' | 'high' | 'urgent'
  status          String // 'open' | 'in_progress' | 'resolved' | 'closed'
  subject         String
  description     String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  customer      User            @relation("CustomerTickets", fields: [customerId], references: [id])
  assignedStaff User?           @relation("AssignedTickets", fields: [assignedStaffId], references: [id])
  category      Category        @relation(fields: [categoryId], references: [id])
  messages      TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id             String   @id @default(cuid())
  ticketId       String   @map("ticket_id")
  senderId       String   @map("sender_id")
  message        String
  attachmentUrls String   @default("[]") @map("attachment_urls") // JSON string
  isInternal     Boolean  @default(false) @map("is_internal")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender User   @relation(fields: [senderId], references: [id])

  @@map("ticket_messages")
}

// Note: SQLite doesn't support enums, so we use strings with validation in the application layer
